import os
import time
import datetime
from lxml import etree
import psycopg2

'''
Function for calculating the elapsed time of an action

Input:  start time type time
        end time type time

Output: elapsed time in seconds
'''
def elapsed_time(start, end):
    elapsed = round(((end - start) % 60), 2)

    return (str(elapsed) + 'seconds')

'''
Variable for DBLP file

Input: a file in XML format

Source file location: http://dblp.uni-trier.de/xml/

File version date: 11 March 2017
'''
dblp_xml_file_name = 'dblp-2017-03-03.xml'

'''
Variable for the location of DBLP file.
In our program, we have a directory named 'data'.  Inside this directory, there are two files:
(1) dblp.dtd and (2) dblp.xml.  The (1) is the data definition for the xml and the (2) is the dblp data.
'''
file_location = os.path.abspath(os.path.join('data', dblp_xml_file_name))

'''
Variable for the DBLP XML file using its DTD file.
'''
parser = etree.XMLParser(dtd_validation=True)

'''
Initializing time and date markers for parsing the XML file
'''
parse_start_time = time.time()
parse_start_date = datetime.datetime.now()
print(str(parse_start_date) + ': Start to parse the xml data...')

'''
Parsing the DBLP XML file
'''
doc = etree.parse(file_location, parser)

'''
Ending time and date markers for parsing the XML file
'''
parse_end_time = time.time()
parsed_end_date = datetime.datetime.now()
print('Parsed within ' + elapsed_time(parse_start_time, parse_end_time) + ' and ended on ' + str(parsed_end_date))

'''
Getting the root of the DBLP XML file
'''
root = doc.getroot()

'''
Initializing the required counter for collecting data migration statistics
'''
article_counter = 0
inproceedings_counter = 0
proceedings_counter = 0
book_counter = 0
incollection_counter = 0
phdthesis_counter = 0
mastersthesis_counter = 0
www_counter = 0

'''
Establishing connection to PostgreSQL RDBMS.
In this program, I use PostgreSQL DBMS to store the DBLP data.
The name of the database is "dblp".
The database user that I use in this progam is named "satrio".
At this program, I do not use any password to access the database.
I use psycopg2 python library as the PostgreSQL adapter.

The syntax for establishing connection:
conn = psycopg2.connect("dbname=database-name user=database-username password=user-password-if-any")
'''
conn = psycopg2.connect("dbname=dblp user=satrio")
cur = conn.cursor()

'''
Initializing time and date marker for iterating the root's children
'''
iteration_start_time = time.time()
iteration_start_date = datetime.datetime.now()
print(str(iteration_start_date) + ': Start the migration process...')

'''
Iterating root's children.
The children composed of article|inproceedings|proceedings|book|incollection|phdthesis|mastersthesis|www
'''
for children in root:
    '''
    Initializing child's attributes.
    IMPORTANT: not all children have these attributes but we initialized them anyway so their are there when they are
    needed.
    '''
    key = None
    mdate = None
    publtype = None
    reviewid = None
    rating = None

    '''
    Initializing child's sub-elements.
    Some sub-elements are initialized as empty lists due to the nature of the data of those sub-elements
    '''
    editor = None
    title = None
    booktitle = None
    pages = None
    year = None
    address = None
    journal = None
    volume = None
    number = None
    month = None
    url = None
    cdrom = None
    publisher = None
    note = None
    crossref = None
    isbn = None
    series = None
    school = None
    chapter = None
    author = []
    cite = []
    ee = []

    '''
    Iterating through the child's attribute for assigning the attribute value to a variable
    '''
    for attribute_name, attribute_value in children.items():
        if(attribute_name == 'key'):
            key = attribute_value
        if(attribute_name == 'mdate'):
            mdate = attribute_value
        if(attribute_name == 'publtype'):
            publtype = attribute_value
        if(attribute_name == 'reviewid'):
            reviewid = attribute_value
        if(attribute_name == 'rating'):
            rating = attribute_value

    '''
    Retrieving DBLP data value through iterating the root's grandchildren
    The following are the root's children:
    - author
    - editor
    - title
    - booktitle
    - pages
    - year
    - address
    - journal
    - volume
    - number
    - month
    - url
    - ee
    - cdrom
    - cite
    - publisher
    - note
    - crossref
    - isbn
    - series
    - school
    - chapter
    Some of these grandchildren's value may be NULL
    '''
    for grand_children in children:
        if (grand_children.tag == 'author'):
            '''
            Intializing time marker for checking author data in the database.
            '''
            check_author_start = time.time()

            print('Checking the existence of author data in the database...')

            '''
            Querying data in the database.
            Input: key from the children's attribute
                   author from the value of the grand children's tag
            '''
            query = 'SELECT key, author FROM author WHERE key = %s AND author = %s'
            data = (key, grand_children.text,)
            cur.execute(query, data)

            '''
            Ending time marker for checking author data in the database.
            '''
            check_author_end = time.time()

            print('Checked within ' + elapsed_time(check_author_start, check_author_end))

            '''
            Check the query result.
            If the author has not yet exist in the database then we add the new author to the database
            Else we print out a notification which says that the author already existed in the database and we ignore it.
            '''
            if (cur.fetchone() is None):
                print('Inserting ' + str(key) + ', ' + str(grand_children.text) + ' into AUTHOR table in database')

                '''
                Initializing time marker for author data insertion
                '''
                author_start = time.time()

                '''
                Inserting new author to the database
                '''
                query = "INSERT INTO author(key,author) VALUES (%s, %s)"
                data = (key, grand_children.text,)
                cur.execute(query, data)
                conn.commit()

                '''
                Ending time marker for author data insertion
                '''
                author_end = time.time()

                print(str(key) + ', ' + str(grand_children.text) + ' has been inserted within ' + elapsed_time(
                    author_start, author_end))
            else:
                print('Author data: ' + str(key) + ', ' + str(grand_children.text) + ' already existed in the database')

        elif (grand_children.tag == 'editor'):
            '''
            Initializing time marker for checking editor data in the database.
            '''
            check_editor_start = time.time()

            print('Checking existing editor data...')

            '''
            Querying data in the database.
            Input: key from the children's attribute
                   editor from the value of the grand children's tag
            '''
            query = 'SELECT key, editor FROM editor WHERE key = %s AND editor = %s'
            data = (key, grand_children.text,)
            cur.execute(query, data)

            '''
            Ending time marker for checking editor data in the database.
            '''
            check_editor_end = time.time()

            print('Checked within ' + elapsed_time(check_editor_start, check_editor_end))

            '''
            Check the query result.
            If the editor has not yet exist in the database then we add the new editor to the database
            Else we print out a notification which says that the editor already existed in the database and we ignore it.
            '''
            if (cur.fetchone() is None):
                print('Inserting ' + str(key) + ', ' + str(grand_children.text) + ' into EDITOR table in database')

                '''
                Initializing time marker for editor data insertion
                '''
                editor_start = time.time()

                '''
                Inserting new editor to the database
                '''
                query = 'INSERT INTO editor(key, editor) VALUES (%s, %s)'
                data = (key, grand_children.text,)
                cur.execute(query, data)
                conn.commit()

                '''
                Ending time marker for editor data insertion
                '''
                editor_end = time.time()

                print(str(key) + ', ' + str(grand_children.text) + ' has been inserted within ' + elapsed_time(editor_start, editor_end))
            else:
                print('Editor data: {0}, {1} already existed in database'.format(str(key), str(grand_children.text)))


        elif (grand_children.tag == 'title'):
            title = str(grand_children.text)

        elif (grand_children.tag == 'booktitle'):
            booktitle = str(grand_children.text)

        elif (grand_children.tag == 'pages'):
            pages = str(grand_children.text)

        elif (grand_children.tag == 'year'):
            year = str(grand_children.text)

        elif (grand_children.tag == 'address'):
            address = str(grand_children.text)

        elif (grand_children.tag == 'journal'):
            journal = str(grand_children.text)

        elif (grand_children.tag == 'volume'):
            volume = str(grand_children.text)

        elif (grand_children.tag == 'number'):
            number = str(grand_children.text)

        elif (grand_children.tag == 'month'):
            month = str(grand_children.text)

        elif (grand_children.tag == 'url'):
            url = str(grand_children.text)

        elif (grand_children.tag == 'ee'):
            '''
            Initializing time marker for checking ee data in the database
            '''
            check_ee_start = time.time()

            print('Checking existing ee data...')

            '''
            Querying data in the database.
            Input: key from the children's attribute
                   ee from the value of the grand children's tag
            '''
            query = 'SELECT key, ee FROM ee WHERE key = %s AND ee = %s'
            data = (key, grand_children.text,)
            cur.exeucte(query, data)

            '''
            Ending time marker for checking ee data in the database
            '''
            check_ee_end = time.time()

            print('Checked within ' + elapsed_time(check_ee_start, check_ee_end))

            '''
            Check the query result.
            If the ee has not yet exist in the database then we add the new ee to the database
            Else we print out a notification which says that the ee already existed in the database and we ignore it.
            '''
            if (cur.fetchone() is None):
                print('Inserting ' + str(key) + str(grand_children.text) + ' into EE table in database')

                '''
                Initializing time marker for ee data insertion
                '''
                ee_start = time.time()

                '''
                Inserting new ee into the database
                '''
                query = "INSERT INTO ee(key, ee) VALUES (%s, %s)"
                data = (key, grand_children.text,)
                cur.execute(query, data)
                conn.commit()

                '''
                Ending time marker for ee data insertion
                '''
                ee_end = time.time()

                print(str(key) + ', ' + str(grand_children.text) + ' has been inserted within ' + elapsed_time(ee_start, ee_end))
            else:
                print('Ee data: ' + str(key) + ', ' + str(grand_children.text) + ' already existed in database')

        if (grand_children.tag == 'cdrom'):
            cdrom = str(grand_children.text)
        if (grand_children.tag == 'cite'):
            '''
            Initializing time marker for checking cite data in the database
            '''
            check_cite_start = time.time()

            print('Checking existing cite data...')

            '''
            Querying data in the database.
            Input: key from the children's attribute
                   cite from the value of the grand children's tag
            '''
            query = "SELECT key, cite FROM cite WHERE key = %s AND cite = %s"
            data = (key, grand_children.text,)
            cur.execute(query, data)

            '''
            Ending time marker for checking cite data in the database
            '''
            check_cite_end = time.time()

            print('Checked within ' + elapsed_time(check_cite_start, check_cite_end))

            '''
            Check the query result.
            If the cite has not yet exist in the database then we add the new cite to the database
            Else we print out a notification which says that the cite already existed in the database and we ignore it.
            '''
            if (cur.fetchone() is None):
                print('Inserting ' + str(key) + str(grand_children.text) + ' into CITE table in DBLP database')

                '''
                Initializing time marker for cite data insertion
                '''
                cite_start = time.time()

                '''
                Inserting new cite data
                '''
                query = "INSERT INTO cite(key, cite) VALUES (%s, %s)"
                data = (key, grand_children.text,)
                cur.execute(query, data)
                conn.commit()

                '''
                Ending time marker for cite data insertion
                '''
                cite_end = time.time()
                print(str(key) + ', ' + str(grand_children.text) + ' has been inserted within ' + elapsed_time(cite_start, cite_end))
            else:
                print('Cite data: ' + str(key) + ', ' + str(grand_children.text) + ' already existed in database')

        elif (grand_children.tag == 'publisher'):
            publisher = str(grand_children.text)
        elif (grand_children.tag == 'note'):
            note = str(grand_children.text)
        elif (grand_children.tag == 'crossref'):
            crossref = str(grand_children.text)
        elif (grand_children.tag == 'isbn'):
            isbn = str(grand_children.text)
        elif (grand_children.tag == 'series'):
            series = str(grand_children.text)
        elif (grand_children.tag == 'school'):
            school = str(grand_children.text)
        elif (grand_children.tag == 'chapter'):
            chapter = str(grand_children.text)

    '''
    The following codes are for storing the publications data.
    The publication types are one of the following:
    - article
    - inproceedings
    - proceedings
    - book
    - incollection
    - phdthesis
    - mastersthesis
    - www
    '''
    try:
        '''
        Checking if the root's children's tag value is 'article'
        '''
        if (children.tag == 'article'):
            '''
            Initializing time marker for checking article data in the database
            '''
            check_article_start = time.time()

            print('Checking for an exising article with this key: ' + str(key))

            '''
            Querying article in the database
            '''
            query = """SELECT * FROM article WHERE key = %s"""
            data = (key,)
            cur.execute(query, data)

            '''
            Ending time marker for checking article data in the database
            '''
            check_article_end = time.time()

            print('Checked within ' + elapsed_time(check_article_start, check_article_end))

            '''
            Check the query result.
            If the article has not yet exist in the database then we add the new article to the database
            Else we print out a notification which says that the article already existed in the database and we ignore it.
            '''
            if (cur.fetchone() is None):
                '''
                Updating the counter for the number of article iterated in the data set
                '''
                article_counter += 1

                print('Inserting ' + str(children.tag) + ' data no.: ' + str(article_counter))

                '''
                Initializing time marker for article data insertion
                '''
                article_start = time.time()

                '''
                Inserting new article into the database
                '''
                query = """INSERT INTO article(key, mdate, publtype, reviewid, rating, author, editor, title, booktitle, pages, year, address, journal, volume, number, month, url, ee, cdrom, cite, publisher, note, crossref, isbn, series, school, chapter) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"""
                data = (
                key, mdate, publtype, reviewid, rating, author, editor, title, booktitle, pages, year, address, journal,
                volume, number, month, url, ee, cdrom, cite, publisher, note, crossref, isbn, series, school, chapter,)
                cur.execute(query, data )
                conn.commit()

                '''
                Ending time marker for article data insertion
                '''
                article_end = time.time()

                print('An article has been inserted to the database within ' + elapsed_time(article_start, article_end))
                print('Number of articles added: ' + str(article_counter))
            else:
                print('This article ' + str(key) + ', ' + str(title) + ' has already existed in the database')
                print('Number of articles added: ' + str(article_counter))

        elif (children.tag == 'inproceedings'):
            '''
            Initializing time marker for checking inproceedings data in the database
            '''
            check_inproceedings_start = time.time()

            print('Checking for an exising inproceedings with this key: ' + str(key))

            '''
            Querying inproceedings in the database
            '''
            query = """SELECT * FROM inproceedings WHERE key = %s"""
            data = (key,)
            cur.execute(query, data)

            '''
            Ending time marker for checking inproceedings data in the database
            '''
            check_inproceedings_end = time.time()

            print('Checked within ' + elapsed_time(check_inproceedings_start, check_inproceedings_end))

            '''
            Check the query result.
            If the inproceedings has not yet exist in the database then we add the new inproceedings to the database
            Else we print out a notification which says that the inproceedings already existed in the database and we ignore it.
            '''
            if(cur.fetchone() is None):
                '''
                Updating the counter for the number of inproceedings iterated in the data set
                '''
                inproceedings_counter += 1

                print('Inserting ' + str(children.tag) + ' data No.: ' + str(inproceedings_counter))

                '''
                Initializing time marker for inproceedings data insertion
                '''
                inproceeding_start = time.time()

                '''
                Inserting new inproceedings into the database
                '''
                query = """INSERT INTO inproceedings(key, mdate, publtype, author, editor, title, booktitle, pages, year, address, journal, volume, number, month, url, ee, cdrom, cite, publisher, note, crossref, isbn, series, school, chapter) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"""
                data = (
                key, mdate, publtype, author, editor, title, booktitle, pages, year, address, journal, volume, number,
                month, url, ee, cdrom, cite, publisher, note, crossref, isbn, series, school, chapter,)
                cur.execute(query, data)
                conn.commit()

                '''
                Ending time marker for inproceedings data insertion
                '''
                inproceeding_end = time.time()

                print('An inproceeding has been inserted to the database within ' + elapsed_time(inproceeding_start,
                                                                                                 inproceeding_end))
                print('Number of inproceedings added: ' + str(inproceedings_counter))
            else:
                print('This inproceedings ' + str(key) + ', ' + str(title) + ' has already existed in the database')
                print('Number of inproceedings added: ' + str(inproceedings_counter))

        elif (children.tag == 'proceedings'):
            '''
            Initializing time marker for checking proceedings data in the database
            '''
            check_proceedings_start = time.time()

            print('Checking for an existing proceedings with this key: ' + str(key))

            '''
            Querying proceedings in the database
            '''
            query = """SELECT * FROM proceedings WHERE key = %s"""
            data = (key,)
            cur.execute(query, data)

            '''
            Ending time marker for checking proceeding data in the database
            '''
            check_proceedings_end = time.time()

            print('Checked within ' + elapsed_time(check_proceedings_start, check_proceedings_end))

            '''
            Check the query result.
            If the proceedings has not yet exist in the database then we add the new proceedings to the database
            Else we print out a notification which says that the proceedings already existed in the database and we ignore it.
            '''
            if (cur.fetchone() is None):
                '''
                Updating the counter for the number of proceedings iterated in the data set
                '''
                proceedings_counter += 1

                print('Inserting ' + str(children.tag) + ' data No.: ' + str(proceedings_counter))

                '''
                Initializing time marker for proceedings data insertion
                '''
                proceeding_start = time.time()

                '''
                Inserting new proceedings into database
                '''
                query = """INSERT INTO proceedings(key, mdate, publtype, author, editor, title, booktitle, pages, year, address, journal, volume, number, month, url, ee, cdrom, cite, publisher, note, crossref, isbn, series, school, chapter) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"""
                data = (
                key, mdate, publtype, author, editor, title, booktitle, pages, year, address, journal, volume, number,
                month, url, ee, cdrom, cite, publisher, note, crossref, isbn, series, school, chapter,)
                cur.execute(query, data)
                conn.commit()

                '''
                Ending time marker for proceedings data insertion
                '''
                proceeding_start = time.time()

                print('A proceeding has been inserted to the database within ' + elapsed_time(proceeding_start, proceeding_end))
                print('Number of proceedings added: ' + str(proceedings_counter))

            else:
                print('This proceedings ' + str(key) + ', ' + str(title) + ' has already existed in the database')
                print('Number of proceedings added: ' + str(proceedings_counter))

        elif (children.tag == 'book'):
            '''
            Initializing time marker for checking book in the database
            '''
            check_book_start = time.time()

            print('Checking for an existing book with this key: ' + str(key))

            '''
            Querying book in the database
            '''
            query = """SELECT * FROM book WHERE key = %s"""
            data = (key,)
            cur.execute(query, data)

            '''
            Ending time marker for checking book in the database
            '''
            check_book_end = time.time()

            print('Checked within ' + elapsed_time(check_book_start, check_book_end))

            '''
            Check the query result.
            If the proceedings has not yet exist in the database then we add the new proceedings to the database.
            Else we print out a notification which says that the proceedings already existed in the database and we ignore it.
            '''
            if (cur.fetchone() is None):
                '''
                Updating the counter for the number of book iterated in the data set.
                '''
                book_counter += 1

                print('Inserting ' + str(children.tag) + ' data No.: ' + str(book_counter))

                '''
                Initializing time marker for book data insertion.
                '''
                book_start = time.time()

                '''
                Inserting new books into the database.
                '''
                query = """INSERT INTO book(key, mdate, publtype, author, editor, title, booktitle, pages, year, address, journal, volume, number, month, url, ee, cdrom, cite, publisher, note, crossref, isbn, series, school, chapter) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"""
                data = (key, mdate, publtype, author, editor, title, booktitle, pages, year, address, journal, volume, number, month, url, ee, cdrom, cite, publisher, note, crossref, isbn, series, school, chapter,)
                cur.execute(query, data)
                conn.commit()

                '''
                Ending time marker for book data insertion.
                '''
                book_end = time.time()

                print('A book has been inserted to the database within ' + elapsed_time(book_start, book_end))
                print('Number of books added: ' + str(book_counter))

            else:
                print('This book ' + str(key) + ', ' + str(title) + ' has already existed in the database')
                print('Number of book added: ' + str(book_counter))

        elif (children.tag == 'incollection'):
            '''
            Initializing time marker for checking incollection in the database
            '''
            check_incollection_start = time.time()

            print('Checking for an existing incollection with this key: ' + str(key))

            '''
            Querying incollection in the database
            '''
            query = """SELECT * FROM incollection WHERE key = %s"""
            data = (key,)
            cur.execute(query, data)

            '''
            Ending time marker for checking incollection in the database
            '''
            check_incollection_end = time.time()

            print('Checked within ' + elapsed_time(check_incollection_start, check_incollection_end))

            '''
            Check the query result.
            If the incollection has not yet exist in the database then we add the new incollection to the database.
            Else we print out a notification which says that the incollection already existed in the database and we ignore it.
            '''
            if (cur.fetchone() is None):
                '''
                Updating the counter for the number of incollection iterated in the data set.
                '''
                incollection_counter += 1

                print('Inserting ' + str(children.tag) + ' data No.: ' + str(incollection_counter))

                '''
                Initializing time marker for incollection data insertion.
                '''
                incollection_start = time.time()

                '''
                Inserting new incollection into the database.
                '''
                query = """INSERT INTO incollection(key, mdate, publtype, author, editor, title, booktitle, pages, year, address, journal, volume, number, month, url, ee, cdrom, cite, publisher, note, crossref, isbn, series, school, chapter) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"""
                data = (
                key, mdate, publtype, author, editor, title, booktitle, pages, year, address, journal, volume, number,
                month, url, ee, cdrom, cite, publisher, note, crossref, isbn, series, school, chapter,)
                cur.execute(query, data)
                conn.commit()

                '''
                Ending time marker for incollection data insertion.
                '''
                incollection_end = time.time()

                print('An incollection has been inserted to the database within ' + elapsed_time(incollection_start,
                                                                                                 incollection_end))
                print('Number of incollections added: ' + str(incollection_counter))

            else:
                print('This incollection ' + str(key) + ', ' + str(title) + ' has already existed in the database')
                print('Number of incollection added: ' + str(incollection_counter))

        elif (children.tag == 'phdthesis'):
            '''
            Initializing time marker for checking phdthesis in the database
            '''
            check_phdthesis_start = time.time()

            print('Checking for an existing phdthesis with this key: ' + str(key))

            '''
            Querying phdthesis in the database
            '''
            query = """SELECT * FROM phdthesis WHERE key = %s"""
            data = (key,)
            cur.execute(query, data)

            '''
            Ending time marker for checking phdthesis in the database
            '''
            check_phdthesis_end = time.time()

            print('Checked within ' + elapsed_time(check_phdthesis_start, check_phdthesis_end))

            '''
            Check the query result.
            If the phdthesis has not yet exist in the database then we add the new phdthesis to the database.
            Else we print out a notification which says that the phdthesis already existed in the database and we ignore it.
            '''
            if (cur.fetchone() is None):
                '''
                Updating the counter for the number of phdthesis iterated in the data set.
                '''
                phdthesis_counter += 1

                print('Inserting ' + str(children.tag) + ' data No.: ' + str(phdthesis_counter))

                '''
                Initializing time marker for phdthesis data insertion.
                '''
                phdthesis_start = time.time()

                '''
                Inserting new phdthesis into the database.
                '''
                query = """INSERT INTO phdthesis(key, mdate, publtype, author, editor, title, booktitle, pages, year, address, journal, volume, number, month, url, ee, cdrom, cite, publisher, note, crossref, isbn, series, school, chapter) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"""
                data = (
                key, mdate, publtype, author, editor, title, booktitle, pages, year, address, journal, volume, number,
                month, url, ee, cdrom, cite, publisher, note, crossref, isbn, series, school, chapter,)
                cur.execute(query, data)
                conn.commit()

                '''
                Ending time marker for phdthesis data insertion.
                '''
                phdthesis_end = time.time()

                print('An phdthesis has been inserted to the database within ' + elapsed_time(phdthesis_start,
                                                                                                 phdthesis_end))
                print('Number of phdthesis added: ' + str(phdthesis_counter))

            else:
                print('This phdthesis ' + str(key) + ', ' + str(title) + ' has already existed in the database')
                print('Number of phdthesis added: ' + str(phdthesis_counter))

        elif (children.tag == 'mastersthesis'):
            '''
            Initializing time marker for checking mastersthesis in the database
            '''
            check_mastersthesis_start = time.time()

            print('Checking for an existing mastersthesis with this key: ' + str(key))

            '''
            Querying mastersthesis in the database
            '''
            query = """SELECT * FROM mastersthesis WHERE key = %s"""
            data = (key,)
            cur.execute(query, data)

            '''
            Ending time marker for checking mastersthesis in the database
            '''
            check_mastersthesis_end = time.time()

            print('Checked within ' + elapsed_time(check_mastersthesis_start, check_mastersthesis_end))

            '''
            Check the query result.
            If the mastersthesis has not yet exist in the database then we add the new masterthesis to the database.
            Else we print out a notification which says that the mastersthesis already existed in the database and we ignore it.
            '''
            if (cur.fetchone() is None):
                '''
                Updating the counter for the number of mastersthesis iterated in the data set.
                '''
                mastersthesis_counter += 1

                print('Inserting ' + str(children.tag) + ' data No.: ' + str(mastersthesis_counter))

                '''
                Initializing time marker for mastersthesis data insertion.
                '''
                mastersthesis_start = time.time()

                '''
                Inserting new mastersthesis into the database.
                '''
                query = """INSERT INTO mastersthesis(key, mdate, publtype, author, editor, title, booktitle, pages, year, address, journal, volume, number, month, url, ee, cdrom, cite, publisher, note, crossref, isbn, series, school, chapter) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"""
                data = (
                key, mdate, publtype, author, editor, title, booktitle, pages, year, address, journal, volume, number,
                month, url, ee, cdrom, cite, publisher, note, crossref, isbn, series, school, chapter,)
                cur.execute(query, data)
                conn.commit()

                '''
                Ending time marker for mastersthesis data insertion.
                '''
                mastersthesis_end = time.time()

                print('An mastersthesis has been inserted to the database within ' + elapsed_time(mastersthesis_start,
                                                                                              mastersthesis_end))
                print('Number of mastersthesis added: ' + str(mastersthesis_counter))

            else:
                print('This mastersthesis ' + str(key) + ', ' + str(title) + ' has already existed in the database')
                print('Number of mastersthesis added: ' + str(mastersthesis_counter))

        elif (children.tag == 'www'):
            '''
            Initializing time marker for checking www in the database
            '''
            check_www_start = time.time()

            print('Checking for an existing www with this key: ' + str(key))

            '''
            Querying www in the database
            '''
            query = """SELECT * FROM www WHERE key = %s"""
            data = (key,)
            cur.execute(query, data)

            '''
            Ending time marker for checking www in the database
            '''
            check_www_end = time.time()

            print('Checked within ' + elapsed_time(check_www_start, check_www_end))

            '''
            Check the query result.
            If the www has not yet exist in the database then we add the new www to the database.
            Else we print out a notification which says that the www already existed in the database and we ignore it.
            '''
            if (cur.fetchone() is None):
                '''
                Updating the counter for the number of www iterated in the data set.
                '''
                www_counter += 1

                print('Inserting ' + str(children.tag) + ' data No.: ' + str(www_counter))

                '''
                Initializing time marker for www data insertion.
                '''
                www_start = time.time()

                '''
                Inserting new www into the database.
                '''
                query = """INSERT INTO www(key, mdate, publtype, author, editor, title, booktitle, pages, year, address, journal, volume, number, month, url, ee, cdrom, cite, publisher, note, crossref, isbn, series, school, chapter) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"""
                data = (
                key, mdate, publtype, author, editor, title, booktitle, pages, year, address, journal, volume, number,
                month, url, ee, cdrom, cite, publisher, note, crossref, isbn, series, school, chapter,)
                cur.execute(query, data)
                conn.commit()

                '''
                Ending time marker for www data insertion.
                '''
                www_end = time.time()

                print('An www has been inserted to the database within ' + elapsed_time(www_start, www_end))
                print('Number of www added: ' + str(www_counter))

            else:
                print('This www ' + str(key) + ', ' + str(title) + ' has already existed in the database')
                print('Number of www added: ' + str(www_counter))

    finally:
        cur.close()
        conn.close()

'''
Ending time and date marker for iterating the root's childres
'''
iteration_end_time = time.time()
iteration_end_date = datetime.datetime.now()
print('The migration process finished within ' + elapsed_time(iteration_start_time, iteration_end_time) + ' and ended on ' + str(iteration_end_date))

print('Parsing and Migration Process Has Ended.')
print(('Job started on %s-%s-%s at %s:%s:%s and ended on %s-%s-%s at %s:%s:%s') % (str(start_at.day), str(start_at.month), str(start_at.year), str(start_at.hour), str(start_at.minute), str(start_at.second), str(finished_at.day), str(finished_at.month), str(finished_at.year), str(finished_at.hour), str(finished_at.minute), str(finished_at.second)))
print(('Job duration: %s') % (str(duration)))
print(('Number of Articles: %s records') % (str(article_counter)))
print(('Number of Inproceedings: %s records') % (str(inproceedings_counter)))
print(('Number of Proceedings: %s records') % (str(proceedings_counter)))
print(('Number of Books: %s records') % (str(book_counter)))
print(('Number of Incollections: %s records') % (str(incollection_counter)))
print(('Number of Phd Thesis: %s records') % (str(phdthesis_counter)))
print(('Number of Masters Thesis: %s records') % (str(mastersthesis_counter)))
print(('Number of WWW: %s records') % (str(www_counter)))